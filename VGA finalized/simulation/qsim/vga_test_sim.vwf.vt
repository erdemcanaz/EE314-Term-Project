// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2023 23:02:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main_vga_module
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vga_module_vlg_sample_tst(
	clock_builtin_50MHZ,
	sampler_tx
);
input  clock_builtin_50MHZ;
output sampler_tx;

reg sample;
time current_time;
always @(clock_builtin_50MHZ)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vga_module_vlg_check_tst (
	blue_8bit,
	clock_out_25MHZ,
	green_8bit,
	h_sync,
	red_8bit,
	v_sync,
	sampler_rx
);
input [7:0] blue_8bit;
input  clock_out_25MHZ;
input [7:0] green_8bit;
input  h_sync;
input [7:0] red_8bit;
input  v_sync;
input sampler_rx;

reg [7:0] blue_8bit_expected;
reg  clock_out_25MHZ_expected;
reg [7:0] green_8bit_expected;
reg  h_sync_expected;
reg [7:0] red_8bit_expected;
reg  v_sync_expected;

reg [7:0] blue_8bit_prev;
reg  clock_out_25MHZ_prev;
reg [7:0] green_8bit_prev;
reg  h_sync_prev;
reg [7:0] red_8bit_prev;
reg  v_sync_prev;

reg [7:0] blue_8bit_expected_prev;
reg [7:0] green_8bit_expected_prev;
reg  h_sync_expected_prev;
reg [7:0] red_8bit_expected_prev;
reg  v_sync_expected_prev;

reg [7:0] last_blue_8bit_exp;
reg [7:0] last_green_8bit_exp;
reg  last_h_sync_exp;
reg [7:0] last_red_8bit_exp;
reg  last_v_sync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	blue_8bit_prev = blue_8bit;
	clock_out_25MHZ_prev = clock_out_25MHZ;
	green_8bit_prev = green_8bit;
	h_sync_prev = h_sync;
	red_8bit_prev = red_8bit;
	v_sync_prev = v_sync;
end

// update expected /o prevs

always @(trigger)
begin
	blue_8bit_expected_prev = blue_8bit_expected;
	green_8bit_expected_prev = green_8bit_expected;
	h_sync_expected_prev = h_sync_expected;
	red_8bit_expected_prev = red_8bit_expected;
	v_sync_expected_prev = v_sync_expected;
end


// expected blue_8bit[ 7 ]
initial
begin
	blue_8bit_expected[7] = 1'bX;
	blue_8bit_expected[7] = #999000 1'b0;
end 
// expected blue_8bit[ 6 ]
initial
begin
	blue_8bit_expected[6] = 1'bX;
	blue_8bit_expected[6] = #999000 1'b0;
end 
// expected blue_8bit[ 5 ]
initial
begin
	blue_8bit_expected[5] = 1'bX;
	blue_8bit_expected[5] = #999000 1'b0;
end 
// expected blue_8bit[ 4 ]
initial
begin
	blue_8bit_expected[4] = 1'bX;
	blue_8bit_expected[4] = #999000 1'b0;
end 
// expected blue_8bit[ 3 ]
initial
begin
	blue_8bit_expected[3] = 1'bX;
	blue_8bit_expected[3] = #999000 1'b0;
end 
// expected blue_8bit[ 2 ]
initial
begin
	blue_8bit_expected[2] = 1'bX;
	blue_8bit_expected[2] = #999000 1'b0;
end 
// expected blue_8bit[ 1 ]
initial
begin
	blue_8bit_expected[1] = 1'bX;
	blue_8bit_expected[1] = #999000 1'b0;
end 
// expected blue_8bit[ 0 ]
initial
begin
	blue_8bit_expected[0] = 1'bX;
	blue_8bit_expected[0] = #999000 1'b0;
end 
// expected green_8bit[ 7 ]
initial
begin
	green_8bit_expected[7] = 1'bX;
	green_8bit_expected[7] = #999000 1'b0;
end 
// expected green_8bit[ 6 ]
initial
begin
	green_8bit_expected[6] = 1'bX;
	green_8bit_expected[6] = #999000 1'b0;
end 
// expected green_8bit[ 5 ]
initial
begin
	green_8bit_expected[5] = 1'bX;
	green_8bit_expected[5] = #999000 1'b0;
end 
// expected green_8bit[ 4 ]
initial
begin
	green_8bit_expected[4] = 1'bX;
	green_8bit_expected[4] = #999000 1'b0;
end 
// expected green_8bit[ 3 ]
initial
begin
	green_8bit_expected[3] = 1'bX;
	green_8bit_expected[3] = #999000 1'b0;
end 
// expected green_8bit[ 2 ]
initial
begin
	green_8bit_expected[2] = 1'bX;
	green_8bit_expected[2] = #999000 1'b0;
end 
// expected green_8bit[ 1 ]
initial
begin
	green_8bit_expected[1] = 1'bX;
	green_8bit_expected[1] = #999000 1'b0;
end 
// expected green_8bit[ 0 ]
initial
begin
	green_8bit_expected[0] = 1'bX;
	green_8bit_expected[0] = #999000 1'b0;
end 
// expected red_8bit[ 7 ]
initial
begin
	red_8bit_expected[7] = 1'bX;
	red_8bit_expected[7] = #999000 1'b0;
end 
// expected red_8bit[ 6 ]
initial
begin
	red_8bit_expected[6] = 1'bX;
	red_8bit_expected[6] = #999000 1'b0;
end 
// expected red_8bit[ 5 ]
initial
begin
	red_8bit_expected[5] = 1'bX;
	red_8bit_expected[5] = #999000 1'b0;
end 
// expected red_8bit[ 4 ]
initial
begin
	red_8bit_expected[4] = 1'bX;
	red_8bit_expected[4] = #999000 1'b0;
end 
// expected red_8bit[ 3 ]
initial
begin
	red_8bit_expected[3] = 1'bX;
	red_8bit_expected[3] = #999000 1'b0;
end 
// expected red_8bit[ 2 ]
initial
begin
	red_8bit_expected[2] = 1'bX;
	red_8bit_expected[2] = #999000 1'b0;
end 
// expected red_8bit[ 1 ]
initial
begin
	red_8bit_expected[1] = 1'bX;
	red_8bit_expected[1] = #999000 1'b0;
end 
// expected red_8bit[ 0 ]
initial
begin
	red_8bit_expected[0] = 1'bX;
	red_8bit_expected[0] = #999000 1'b0;
end 

// expected h_sync
initial
begin
	h_sync_expected = 1'bX;
	h_sync_expected = #999000 1'b0;
end 

// expected v_sync
initial
begin
	v_sync_expected = 1'bX;
	v_sync_expected = #999000 1'b0;
end 
// generate trigger
always @(blue_8bit_expected or blue_8bit or clock_out_25MHZ_expected or clock_out_25MHZ or green_8bit_expected or green_8bit or h_sync_expected or h_sync or red_8bit_expected or red_8bit or v_sync_expected or v_sync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blue_8bit = %b | expected clock_out_25MHZ = %b | expected green_8bit = %b | expected h_sync = %b | expected red_8bit = %b | expected v_sync = %b | ",blue_8bit_expected_prev,clock_out_25MHZ_expected_prev,green_8bit_expected_prev,h_sync_expected_prev,red_8bit_expected_prev,v_sync_expected_prev);
	$display("| real blue_8bit = %b | real clock_out_25MHZ = %b | real green_8bit = %b | real h_sync = %b | real red_8bit = %b | real v_sync = %b | ",blue_8bit_prev,clock_out_25MHZ_prev,green_8bit_prev,h_sync_prev,red_8bit_prev,v_sync_prev);
`endif
	if (
		( blue_8bit_expected_prev[0] !== 1'bx ) && ( blue_8bit_prev[0] !== blue_8bit_expected_prev[0] )
		&& ((blue_8bit_expected_prev[0] !== last_blue_8bit_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[0] = blue_8bit_expected_prev[0];
	end
	if (
		( blue_8bit_expected_prev[1] !== 1'bx ) && ( blue_8bit_prev[1] !== blue_8bit_expected_prev[1] )
		&& ((blue_8bit_expected_prev[1] !== last_blue_8bit_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[1] = blue_8bit_expected_prev[1];
	end
	if (
		( blue_8bit_expected_prev[2] !== 1'bx ) && ( blue_8bit_prev[2] !== blue_8bit_expected_prev[2] )
		&& ((blue_8bit_expected_prev[2] !== last_blue_8bit_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[2] = blue_8bit_expected_prev[2];
	end
	if (
		( blue_8bit_expected_prev[3] !== 1'bx ) && ( blue_8bit_prev[3] !== blue_8bit_expected_prev[3] )
		&& ((blue_8bit_expected_prev[3] !== last_blue_8bit_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[3] = blue_8bit_expected_prev[3];
	end
	if (
		( blue_8bit_expected_prev[4] !== 1'bx ) && ( blue_8bit_prev[4] !== blue_8bit_expected_prev[4] )
		&& ((blue_8bit_expected_prev[4] !== last_blue_8bit_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[4] = blue_8bit_expected_prev[4];
	end
	if (
		( blue_8bit_expected_prev[5] !== 1'bx ) && ( blue_8bit_prev[5] !== blue_8bit_expected_prev[5] )
		&& ((blue_8bit_expected_prev[5] !== last_blue_8bit_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[5] = blue_8bit_expected_prev[5];
	end
	if (
		( blue_8bit_expected_prev[6] !== 1'bx ) && ( blue_8bit_prev[6] !== blue_8bit_expected_prev[6] )
		&& ((blue_8bit_expected_prev[6] !== last_blue_8bit_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[6] = blue_8bit_expected_prev[6];
	end
	if (
		( blue_8bit_expected_prev[7] !== 1'bx ) && ( blue_8bit_prev[7] !== blue_8bit_expected_prev[7] )
		&& ((blue_8bit_expected_prev[7] !== last_blue_8bit_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blue_8bit[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blue_8bit_expected_prev);
		$display ("     Real value = %b", blue_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blue_8bit_exp[7] = blue_8bit_expected_prev[7];
	end
	if (
		( green_8bit_expected_prev[0] !== 1'bx ) && ( green_8bit_prev[0] !== green_8bit_expected_prev[0] )
		&& ((green_8bit_expected_prev[0] !== last_green_8bit_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[0] = green_8bit_expected_prev[0];
	end
	if (
		( green_8bit_expected_prev[1] !== 1'bx ) && ( green_8bit_prev[1] !== green_8bit_expected_prev[1] )
		&& ((green_8bit_expected_prev[1] !== last_green_8bit_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[1] = green_8bit_expected_prev[1];
	end
	if (
		( green_8bit_expected_prev[2] !== 1'bx ) && ( green_8bit_prev[2] !== green_8bit_expected_prev[2] )
		&& ((green_8bit_expected_prev[2] !== last_green_8bit_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[2] = green_8bit_expected_prev[2];
	end
	if (
		( green_8bit_expected_prev[3] !== 1'bx ) && ( green_8bit_prev[3] !== green_8bit_expected_prev[3] )
		&& ((green_8bit_expected_prev[3] !== last_green_8bit_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[3] = green_8bit_expected_prev[3];
	end
	if (
		( green_8bit_expected_prev[4] !== 1'bx ) && ( green_8bit_prev[4] !== green_8bit_expected_prev[4] )
		&& ((green_8bit_expected_prev[4] !== last_green_8bit_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[4] = green_8bit_expected_prev[4];
	end
	if (
		( green_8bit_expected_prev[5] !== 1'bx ) && ( green_8bit_prev[5] !== green_8bit_expected_prev[5] )
		&& ((green_8bit_expected_prev[5] !== last_green_8bit_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[5] = green_8bit_expected_prev[5];
	end
	if (
		( green_8bit_expected_prev[6] !== 1'bx ) && ( green_8bit_prev[6] !== green_8bit_expected_prev[6] )
		&& ((green_8bit_expected_prev[6] !== last_green_8bit_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[6] = green_8bit_expected_prev[6];
	end
	if (
		( green_8bit_expected_prev[7] !== 1'bx ) && ( green_8bit_prev[7] !== green_8bit_expected_prev[7] )
		&& ((green_8bit_expected_prev[7] !== last_green_8bit_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port green_8bit[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", green_8bit_expected_prev);
		$display ("     Real value = %b", green_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_green_8bit_exp[7] = green_8bit_expected_prev[7];
	end
	if (
		( h_sync_expected_prev !== 1'bx ) && ( h_sync_prev !== h_sync_expected_prev )
		&& ((h_sync_expected_prev !== last_h_sync_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port h_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", h_sync_expected_prev);
		$display ("     Real value = %b", h_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_h_sync_exp = h_sync_expected_prev;
	end
	if (
		( red_8bit_expected_prev[0] !== 1'bx ) && ( red_8bit_prev[0] !== red_8bit_expected_prev[0] )
		&& ((red_8bit_expected_prev[0] !== last_red_8bit_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[0] = red_8bit_expected_prev[0];
	end
	if (
		( red_8bit_expected_prev[1] !== 1'bx ) && ( red_8bit_prev[1] !== red_8bit_expected_prev[1] )
		&& ((red_8bit_expected_prev[1] !== last_red_8bit_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[1] = red_8bit_expected_prev[1];
	end
	if (
		( red_8bit_expected_prev[2] !== 1'bx ) && ( red_8bit_prev[2] !== red_8bit_expected_prev[2] )
		&& ((red_8bit_expected_prev[2] !== last_red_8bit_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[2] = red_8bit_expected_prev[2];
	end
	if (
		( red_8bit_expected_prev[3] !== 1'bx ) && ( red_8bit_prev[3] !== red_8bit_expected_prev[3] )
		&& ((red_8bit_expected_prev[3] !== last_red_8bit_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[3] = red_8bit_expected_prev[3];
	end
	if (
		( red_8bit_expected_prev[4] !== 1'bx ) && ( red_8bit_prev[4] !== red_8bit_expected_prev[4] )
		&& ((red_8bit_expected_prev[4] !== last_red_8bit_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[4] = red_8bit_expected_prev[4];
	end
	if (
		( red_8bit_expected_prev[5] !== 1'bx ) && ( red_8bit_prev[5] !== red_8bit_expected_prev[5] )
		&& ((red_8bit_expected_prev[5] !== last_red_8bit_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[5] = red_8bit_expected_prev[5];
	end
	if (
		( red_8bit_expected_prev[6] !== 1'bx ) && ( red_8bit_prev[6] !== red_8bit_expected_prev[6] )
		&& ((red_8bit_expected_prev[6] !== last_red_8bit_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[6] = red_8bit_expected_prev[6];
	end
	if (
		( red_8bit_expected_prev[7] !== 1'bx ) && ( red_8bit_prev[7] !== red_8bit_expected_prev[7] )
		&& ((red_8bit_expected_prev[7] !== last_red_8bit_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port red_8bit[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", red_8bit_expected_prev);
		$display ("     Real value = %b", red_8bit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_red_8bit_exp[7] = red_8bit_expected_prev[7];
	end
	if (
		( v_sync_expected_prev !== 1'bx ) && ( v_sync_prev !== v_sync_expected_prev )
		&& ((v_sync_expected_prev !== last_v_sync_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_sync_expected_prev);
		$display ("     Real value = %b", v_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_v_sync_exp = v_sync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vga_module_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_builtin_50MHZ;
// wires                                               
wire [7:0] blue_8bit;
wire clock_out_25MHZ;
wire [7:0] green_8bit;
wire h_sync;
wire [7:0] red_8bit;
wire v_sync;

wire sampler;                             

// assign statements (if any)                          
main_vga_module i1 (
// port map - connection between master ports and signals/registers   
	.blue_8bit(blue_8bit),
	.clock_builtin_50MHZ(clock_builtin_50MHZ),
	.clock_out_25MHZ(clock_out_25MHZ),
	.green_8bit(green_8bit),
	.h_sync(h_sync),
	.red_8bit(red_8bit),
	.v_sync(v_sync)
);

// clock_builtin_50MHZ
always
begin
	clock_builtin_50MHZ = 1'b0;
	clock_builtin_50MHZ = #500 1'b1;
	#500;
end 

main_vga_module_vlg_sample_tst tb_sample (
	.clock_builtin_50MHZ(clock_builtin_50MHZ),
	.sampler_tx(sampler)
);

main_vga_module_vlg_check_tst tb_out(
	.blue_8bit(blue_8bit),
	.clock_out_25MHZ(clock_out_25MHZ),
	.green_8bit(green_8bit),
	.h_sync(h_sync),
	.red_8bit(red_8bit),
	.v_sync(v_sync),
	.sampler_rx(sampler)
);
endmodule

